///
/// @file convention.cpp
/// @author Dohyun Yun ( dualistmage@gmail.com )
/// @date 2011.01.19 ~ 2011.01.20
/// @version 1.0.1
/// @brief Contains all about the cases of code convention.
/// @details
/// Following is the convention options which cannot be described the code.
///       - tap : 4 spaces (in vi, shiftwidth and softtabstop option should also be set to 4.
///       - FileName : header file(*.h), source file(*.cpp), implementation code must be described in the source file even the amount is short.
///       - Line Length : 80 columns
///       - Do not use "using namespace XXX" in the header file.
///       - Do not use do-while.
///       - Do not use magic number.
///       - Use 0 (for integer types), 0.0 (for float types), 0x00 (for pointer) instead of NULL.
///       - Don't forget floating point constants while assigning float types even if the value is integer. 
///           - (ex) float test = 13;   (x)    
///           - (ex) float test = 13.0; (o)
///       - Use 'named constant' for numbers which is not 0 nor 1.
///       - Do not use 'goto'.
///       - Use // for normal comments, / * * / for debug or temporate purpose. Comments should always start with an upper case letter and end with a period.
///       - Use /// instead of / * * / for doxygen comment. 
///
/// @bug ShapeManager has potential exception while retrieving shapes.
/// @note
///       - This is note section.
///

#ifndef __WPL_TEST__ // To avoid duplicate inclusion, use the name of definition name as __PROJECT_FILENAME__
#define __WPL_TEST__

// Include statements should be grouped and placed at the top of the code. #define statement will follow #include
#include <iostream>
#include <vector>

//#include <wpl/Lock.h> // header file of library must be in the directory 
//#include <wpl/log/TestLogger.h> // header file of library must be in the directory 

#define DELETE_ARRAY(x) { if (x) { delete [] (x); (x) = NULL; } }
#define DELETE_SINGLE(x) { if (x) { delete (x); (x) = NULL; } }


namespace wpl {

    namespace shapetool { // namespace should be lowercase and no separater among words.

        /// data type of shape ID.
        typedef std::string shape_id_t; // all characters of type name must be lowercase, separated by "-" and use "_t" as a suffix.

        ///
        /// @brief a class to manage shapes.
        /// @tparam ShapeType Is a data type of Shape Object which ShapeManager handles.
        /// 
        template<class ShapeType> // use 'class' instead of 'typename'
            class ShapeManager// The First character of class name must be uppercase.
            {
                // declaration order
                // 0. typedef, enumerator 
                // 1. public interface
                // 2. private interface
                // 3. public member variable
                // 4. private member variable

                public: // typedef, enumerator

                    enum // enumerator must be uppercase and contain common prefix name like "ERR" in this example.
                    {
                        NO_ERR               = 0,       ///< No Error.
                        ERR_LOCK_INIT_FAILED = -1000,   ///< Lock Initilization Fail Error.
                        ERR_LOCK_FAILED      = -1001,   ///< Lock Fail Error.
                        ERR_UNLOCK_FAILED    = -1002,   ///< Unlock Fail Error.
                    };

                public: // public interface
                    ///
                    /// @brief sets shape object to ShapeManager
                    /// @details
                    ///     - ShapeManager controls shapes to display them to the stdout.
                    /// @param object   shape object.
                    /// @returns
                    ///     -  0 : No Error
                    ///     -  1 : Shape object has defect.
                    ///     - -1 : Memory Allocation error.
                    /// @see Shape
                    ///
                    int setShape(const ShapeType& object); // interface name must start with verb.

                    ///
                    /// @brief debut interface to print all object to stdout.
                    ///
                    void print(); // Don't use 'void' in the void parameter.

                    ///
                    /// @brief returns total length of shapes in the ShapeManager.
                    /// @return Total length of shapes
                    ///
                    int getTotalLength(); 

                    ///
                    /// @brief get URL address of ShapeManager
                    /// @param shapeURL The URL string of ShapeManager
                    /// @returns
                    ///     - 0 : No error.
                    ///     - 1 : URL format error.
                    ///
                    int getURL(const std::string& shapeManagerURL); // Official Abbreviation should be uppercase.

                private: // private interface

                    /// initializes member variables in ShapeManager
                    void initialize(); // abbreviation is not allowed for verb. init(x) -> initialize(o) 

                public: // public member variables

                    /// Static Member variable of ShapeManager which contains total number of shapes for all ShapeManager
                    static int totalNum_;

                private: // private member variables

                    // member variable must have '_' suffix. Don't use prefix 'p' if the variable is pointer. 
                    // pointer type character '*' must stick to its type name. (ex) char *p; (x) -> char* p; (o) 

                    char* managerName_; ///< Character array of manager name.

                    /// contains shapes.
                    std::vector<ShapeType> shapes_; // Plural form is needed for container

            }; // end - class ShapeManager

        ///
        /// @brief Super class of shape object. All shape objects should interit this class.
        ///
        class Shape
        {
            public:
                ///
                /// @brief gets length of this shape.
                /// @return the length of shape.
                ///
                virtual int getLength();

                ///
                /// @brief Selects this shape.
                ///
                void selectThisObject();

            private:
                virtual ~Shape();
            private:

                /// boolean variable which shows if current shape is selected.
                bool isSelected_; // boolean variable must use the prefix "is" and do not use negative statement like "isNotSelected_".
        };

        ///
        /// @brief Exception class of shape.
        ///
        class ShapeException // Exception class should have "Exception" suffix.
        {
            private:
        };

        ///
        /// @brief a class which represents line.
        ///
        class Line : public Shape
        {
            public:

                ///
                /// @brief returns length of line.
                ///
                int getLength(); // Never duplicate object name in the method like 'getLineLength()'.
        }; // end - class Line

    } // end - namespace shapetool
} // end - namespace wpl

int main(int argc, char* argv[])
{
    int nLines = 0;
    if ( nLines != 0 ) // Do not use 'if (nLines)' for data type which is not a boolean.
        nLines++;

    while( true ) // Do not use 'for(;;)' or 'while(1)'  as a infinite loop.
    {
        nLines++;
        if ( nLines < 10 )
            break;
    }

    std::vector< std::vector<int> > matrix;
    std::vector<int> line1(10,2), line2(10,3);
    matrix.push_back(line1);
    matrix.push_back(line2);

    std::vector< std::vector<int> >::iterator xIter = matrix.begin(); // Iterator naming rule
    for(; xIter != matrix.end(); xIter++)
    {
        std::vector<int>::iterator yIter = xIter->begin();
        for(;yIter != xIter->end(); yIter++)
        {
            *yIter += 3;
            std::cout << *yIter << std::endl;
        } // end - for
    } // end - for

    try // try form
    {
        switch( matrix[1][1] ) // switch form
        {
            case 3 :
                std::cout << "three" << std::endl;
            case 4 :
                std::cout << "four" << std::endl;
                break;
            default:
                std::cout << "default" << std::endl;
                break;
        } // end - switch
    } 
    catch (std::exception& exception) 
    {
    } // try - catch

} // end - main()

#endif // __WPL_TEST__

