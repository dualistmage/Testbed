#include <boost/unordered_map.hpp>
#include <iostream>
#include <queue>

using std::cout;
using std::endl;
using std::make_pair;

boost::unordered_map<uint64_t,uint64_t> termFrequencyMap_;

class TermFreqComp
{
    public:
        bool operator()(const std::pair<uint64_t,uint64_t>& lhs,
                const std::pair<uint64_t,uint64_t>& rhs) const
        {
            return ( lhs.second < rhs.second );
        }
        class test{
            void hello() { cout << "hello"; }
        };
};


int main(int argc, char* argv[])
{
    termFrequencyMap_[11111111] = 3;
    termFrequencyMap_[22222222] = 8;
    termFrequencyMap_[33333333] = 1;
    termFrequencyMap_[44444444] = 4;
    termFrequencyMap_[55555555] = 2;
    termFrequencyMap_[66666666] = 6;
    termFrequencyMap_[66666666]++;

    std::priority_queue< std::pair<uint64_t,uint64_t> , 
        std::vector<std::pair<uint64_t,uint64_t> >, TermFreqComp > test_topK;

    for( boost::unordered_map<uint64_t,uint64_t>::iterator iter = termFrequencyMap_.begin();
            iter != termFrequencyMap_.end(); iter++)
    {
        test_topK.push( *iter );
    }

    cout << test_topK.top().first << " , " << test_topK.top().second << endl; test_topK.pop();
    cout << test_topK.top().first << " , " << test_topK.top().second << endl; test_topK.pop();
    cout << test_topK.top().first << " , " << test_topK.top().second << endl; test_topK.pop();
    cout << test_topK.top().first << " , " << test_topK.top().second << endl; test_topK.pop();
    cout << test_topK.top().first << " , " << test_topK.top().second << endl; test_topK.pop();

}
