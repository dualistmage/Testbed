#include <am/3rdparty/rde_hash.h>

#include <boost/unordered_map.hpp>
#include <boost/date_time/local_time/local_time.hpp>

#include <set>
#include <map>

#include <iostream>

using std::cout;
using std::endl;
using std::make_pair;

void top5doc()
{
    cout << "Hello" << endl;
}
int main(int argc, char* argv[])
{
    top5doc();
    std::map<uint64_t,bool> test_map;
    std::set<uint64_t> test_set;
    boost::unordered_map<uint64_t,bool> test_umap;
    izenelib::am::rde_hash<uint64_t,bool> test_rde;
    boost::posix_time::ptime begin;
    boost::posix_time::time_duration td;
    
    const uint64_t MAX_NUM = 9999999;

    cout << "Integer Testing" << endl;
    cout << "===========================================================" << endl;

    cout << "Insertion" << endl;
    cout << "--------------------------------------" << endl;
    begin = boost::posix_time::microsec_clock::local_time();
    for(uint64_t i = 0; i < MAX_NUM; i++)
        test_map.insert(make_pair(i,true));
    td = boost::posix_time::microsec_clock::local_time() - begin;
    cout << "Map : " << td << endl;
    begin = boost::posix_time::microsec_clock::local_time();
    for(uint64_t i = 0; i < MAX_NUM; i++)
        test_umap.insert(make_pair(i,true));
    td = boost::posix_time::microsec_clock::local_time() - begin;
    cout << "UMap: " << td << endl;
    begin = boost::posix_time::microsec_clock::local_time();
    for(uint64_t i = 0; i < MAX_NUM; i++)
        test_set.insert(i);
    td = boost::posix_time::microsec_clock::local_time() - begin;
    cout << "Set : " << td << endl;
    begin = boost::posix_time::microsec_clock::local_time();
    for(uint64_t i = 0; i < MAX_NUM; i++)
        test_rde.insert(i,true);
    td = boost::posix_time::microsec_clock::local_time() - begin;
    cout << "Rde : " << td << endl << endl;

    cout << "Find" << endl;
    cout << "--------------------------------------" << endl;
    begin = boost::posix_time::microsec_clock::local_time();
    for(uint64_t i = 0; i < MAX_NUM; i++)
        if ( test_map.end() == test_map.find(i) )
            cout << "Failed";
    td = boost::posix_time::microsec_clock::local_time() - begin;
    cout << "Map : " << td << endl;
    begin = boost::posix_time::microsec_clock::local_time();
    for(uint64_t i = 0; i < MAX_NUM; i++)
        if ( test_umap.end() == test_umap.find(i) )
            cout << "Failed";
    td = boost::posix_time::microsec_clock::local_time() - begin;
    cout << "UMap: " << td << endl;
    begin = boost::posix_time::microsec_clock::local_time();
    for(uint64_t i = 0; i < MAX_NUM; i++)
        if ( test_set.end() == test_set.find(i) )
            cout << "Failed";
    td = boost::posix_time::microsec_clock::local_time() - begin;
    cout << "Set : " << td << endl;
    begin = boost::posix_time::microsec_clock::local_time();
    for(uint64_t i = 0; i < MAX_NUM; i++)
        if ( NULL == test_rde.find(i) )
            cout << "Failed";
    td = boost::posix_time::microsec_clock::local_time() - begin;
    cout << "Rde : " << td << endl;
    cout << "===========================================================" << endl;

}
